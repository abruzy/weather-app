!(function (e) { const t = {}; function n(r) { if (t[r]) return t[r].exports; const a = t[r] = { i: r, l: !1, exports: {} }; return e[r].call(a.exports, a, a.exports, n), a.l = !0, a.exports; }n.m = e, n.c = t, n.d = function (e, t, r) { n.o(e, t) || Object.defineProperty(e, t, { enumerable: !0, get: r }); }, n.r = function (e) { typeof Symbol !== 'undefined' && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, { value: 'Module' }), Object.defineProperty(e, '__esModule', { value: !0 }); }, n.t = function (e, t) { if (1 & t && (e = n(e)), 8 & t) return e; if (4 & t && typeof e === 'object' && e && e.__esModule) return e; const r = Object.create(null); if (n.r(r), Object.defineProperty(r, 'default', { enumerable: !0, value: e }), 2 & t && typeof e !== 'string') for (const a in e)n.d(r, a, ((t) => e[t]).bind(null, a)); return r; }, n.n = function (e) { const t = e && e.__esModule ? function () { return e.default; } : function () { return e; }; return n.d(t, 'a', t), t; }, n.o = function (e, t) { return Object.prototype.hasOwnProperty.call(e, t); }, n.p = '', n(n.s = 0); }([function (e, t, n) {
  function r(e, t) { if (t.length < e) throw new TypeError(`${e} argument${e}` > 1 ? 's' : ` required, but only ${t.length} present`); } function a(e) { r(1, arguments); const t = Object.prototype.toString.call(e); return e instanceof Date || typeof e === 'object' && t === '[object Date]' ? new Date(e.getTime()) : typeof e === 'number' || t === '[object Number]' ? new Date(e) : (typeof e !== 'string' && t !== '[object String]' || typeof console === 'undefined' || (console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"), console.warn((new Error()).stack)), new Date(NaN)); } function i(e) { r(1, arguments); const t = a(e); return !isNaN(t); }n.r(t); const o = {
    lessThanXSeconds: { one: 'less than a second', other: 'less than {{count}} seconds' }, xSeconds: { one: '1 second', other: '{{count}} seconds' }, halfAMinute: 'half a minute', lessThanXMinutes: { one: 'less than a minute', other: 'less than {{count}} minutes' }, xMinutes: { one: '1 minute', other: '{{count}} minutes' }, aboutXHours: { one: 'about 1 hour', other: 'about {{count}} hours' }, xHours: { one: '1 hour', other: '{{count}} hours' }, xDays: { one: '1 day', other: '{{count}} days' }, aboutXMonths: { one: 'about 1 month', other: 'about {{count}} months' }, xMonths: { one: '1 month', other: '{{count}} months' }, aboutXYears: { one: 'about 1 year', other: 'about {{count}} years' }, xYears: { one: '1 year', other: '{{count}} years' }, overXYears: { one: 'over 1 year', other: 'over {{count}} years' }, almostXYears: { one: 'almost 1 year', other: 'almost {{count}} years' },
  }; function u(e) { return function (t) { const n = t || {}; const r = n.width ? String(n.width) : e.defaultWidth; return e.formats[r] || e.formats[e.defaultWidth]; }; } const s = {
    date: u({
      formats: {
        full: 'EEEE, MMMM do, y', long: 'MMMM do, y', medium: 'MMM d, y', short: 'MM/dd/yyyy',
      },
      defaultWidth: 'full',
    }),
    time: u({
      formats: {
        full: 'h:mm:ss a zzzz', long: 'h:mm:ss a z', medium: 'h:mm:ss a', short: 'h:mm a',
      },
      defaultWidth: 'full',
    }),
    dateTime: u({
      formats: {
        full: "{{date}} 'at' {{time}}", long: "{{date}} 'at' {{time}}", medium: '{{date}}, {{time}}', short: '{{date}}, {{time}}',
      },
      defaultWidth: 'full',
    }),
  }; const c = {
    lastWeek: "'last' eeee 'at' p", yesterday: "'yesterday at' p", today: "'today at' p", tomorrow: "'tomorrow at' p", nextWeek: "eeee 'at' p", other: 'P',
  }; function d(e) { return function (t, n) { let r; const a = n || {}; if ((a.context ? String(a.context) : 'standalone') === 'formatting' && e.formattingValues) { const i = e.defaultFormattingWidth || e.defaultWidth; const o = a.width ? String(a.width) : i; r = e.formattingValues[o] || e.formattingValues[i]; } else { const u = e.defaultWidth; const s = a.width ? String(a.width) : e.defaultWidth; r = e.values[s] || e.values[u]; } return r[e.argumentCallback ? e.argumentCallback(t) : t]; }; } function l(e) { return function (t, n) { const r = String(t); const a = n || {}; const i = a.width; const o = i && e.matchPatterns[i] || e.matchPatterns[e.defaultMatchWidth]; const u = r.match(o); if (!u) return null; let s; const c = u[0]; const d = i && e.parsePatterns[i] || e.parsePatterns[e.defaultParseWidth]; return s = Object.prototype.toString.call(d) === '[object Array]' ? (function (e, t) { for (let n = 0; n < e.length; n++) if (t(e[n])) return n; }(d, ((e) => e.test(r)))) : (function (e, t) { for (const n in e) if (e.hasOwnProperty(n) && t(e[n])) return n; }(d, ((e) => e.test(r)))), s = e.valueCallback ? e.valueCallback(s) : s, { value: s = a.valueCallback ? a.valueCallback(s) : s, rest: r.slice(c.length) }; }; } let h; const m = {
    code: 'en-US',
    formatDistance(e, t, n) { let r; return n = n || {}, r = typeof o[e] === 'string' ? o[e] : t === 1 ? o[e].one : o[e].other.replace('{{count}}', t), n.addSuffix ? n.comparison > 0 ? `in ${r}` : `${r} ago` : r; },
    formatLong: s,
    formatRelative(e, t, n, r) { return c[e]; },
    localize: {
      ordinalNumber(e, t) { const n = Number(e); const r = n % 100; if (r > 20 || r < 10) switch (r % 10) { case 1: return `${n}st`; case 2: return `${n}nd`; case 3: return `${n}rd`; } return `${n}th`; },
      era: d({ values: { narrow: ['B', 'A'], abbreviated: ['BC', 'AD'], wide: ['Before Christ', 'Anno Domini'] }, defaultWidth: 'wide' }),
      quarter: d({ values: { narrow: ['1', '2', '3', '4'], abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'], wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter'] }, defaultWidth: 'wide', argumentCallback(e) { return Number(e) - 1; } }),
      month: d({ values: { narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'], abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'], wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'] }, defaultWidth: 'wide' }),
      day: d({
        values: {
          narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'], short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'], abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'], wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
        },
        defaultWidth: 'wide',
      }),
      dayPeriod: d({
        values: {
          narrow: {
            am: 'a', pm: 'p', midnight: 'mi', noon: 'n', morning: 'morning', afternoon: 'afternoon', evening: 'evening', night: 'night',
          },
          abbreviated: {
            am: 'AM', pm: 'PM', midnight: 'midnight', noon: 'noon', morning: 'morning', afternoon: 'afternoon', evening: 'evening', night: 'night',
          },
          wide: {
            am: 'a.m.', pm: 'p.m.', midnight: 'midnight', noon: 'noon', morning: 'morning', afternoon: 'afternoon', evening: 'evening', night: 'night',
          },
        },
        defaultWidth: 'wide',
        formattingValues: {
          narrow: {
            am: 'a', pm: 'p', midnight: 'mi', noon: 'n', morning: 'in the morning', afternoon: 'in the afternoon', evening: 'in the evening', night: 'at night',
          },
          abbreviated: {
            am: 'AM', pm: 'PM', midnight: 'midnight', noon: 'noon', morning: 'in the morning', afternoon: 'in the afternoon', evening: 'in the evening', night: 'at night',
          },
          wide: {
            am: 'a.m.', pm: 'p.m.', midnight: 'midnight', noon: 'noon', morning: 'in the morning', afternoon: 'in the afternoon', evening: 'in the evening', night: 'at night',
          },
        },
        defaultFormattingWidth: 'wide',
      }),
    },
    match: {
      ordinalNumber: (h = { matchPattern: /^(\d+)(th|st|nd|rd)?/i, parsePattern: /\d+/i, valueCallback(e) { return parseInt(e, 10); } }, function (e, t) { const n = String(e); const r = t || {}; const a = n.match(h.matchPattern); if (!a) return null; const i = a[0]; const o = n.match(h.parsePattern); if (!o) return null; let u = h.valueCallback ? h.valueCallback(o[0]) : o[0]; return { value: u = r.valueCallback ? r.valueCallback(u) : u, rest: n.slice(i.length) }; }),
      era: l({
        matchPatterns: { narrow: /^(b|a)/i, abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i, wide: /^(before christ|before common era|anno domini|common era)/i }, defaultMatchWidth: 'wide', parsePatterns: { any: [/^b/i, /^(a|c)/i] }, defaultParseWidth: 'any',
      }),
      quarter: l({
        matchPatterns: { narrow: /^[1234]/i, abbreviated: /^q[1234]/i, wide: /^[1234](th|st|nd|rd)? quarter/i }, defaultMatchWidth: 'wide', parsePatterns: { any: [/1/i, /2/i, /3/i, /4/i] }, defaultParseWidth: 'any', valueCallback(e) { return e + 1; },
      }),
      month: l({
        matchPatterns: { narrow: /^[jfmasond]/i, abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i, wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i }, defaultMatchWidth: 'wide', parsePatterns: { narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i], any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i] }, defaultParseWidth: 'any',
      }),
      day: l({
        matchPatterns: {
          narrow: /^[smtwf]/i, short: /^(su|mo|tu|we|th|fr|sa)/i, abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i, wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i,
        },
        defaultMatchWidth: 'wide',
        parsePatterns: { narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i], any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i] },
        defaultParseWidth: 'any',
      }),
      dayPeriod: l({
        matchPatterns: { narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i, any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i },
        defaultMatchWidth: 'any',
        parsePatterns: {
          any: {
            am: /^a/i, pm: /^p/i, midnight: /^mi/i, noon: /^no/i, morning: /morning/i, afternoon: /afternoon/i, evening: /evening/i, night: /night/i,
          },
        },
        defaultParseWidth: 'any',
      }),
    },
    options: { weekStartsOn: 0, firstWeekContainsDate: 1 },
  }; function f(e) { if (e === null || !0 === e || !1 === e) return NaN; const t = Number(e); return isNaN(t) ? t : t < 0 ? Math.ceil(t) : Math.floor(t); } function g(e, t) { r(2, arguments); const n = a(e).getTime(); const i = f(t); return new Date(n + i); } function w(e, t) { r(2, arguments); const n = f(t); return g(e, -n); } function y(e, t) { for (var n = e < 0 ? '-' : '', r = Math.abs(e).toString(); r.length < t;)r = `0${r}`; return n + r; } const v = {
    y(e, t) { const n = e.getUTCFullYear(); const r = n > 0 ? n : 1 - n; return y(t === 'yy' ? r % 100 : r, t.length); }, M(e, t) { const n = e.getUTCMonth(); return t === 'M' ? String(n + 1) : y(n + 1, 2); }, d(e, t) { return y(e.getUTCDate(), t.length); }, a(e, t) { const n = e.getUTCHours() / 12 >= 1 ? 'pm' : 'am'; switch (t) { case 'a': case 'aa': case 'aaa': return n.toUpperCase(); case 'aaaaa': return n[0]; case 'aaaa': default: return n === 'am' ? 'a.m.' : 'p.m.'; } }, h(e, t) { return y(e.getUTCHours() % 12 || 12, t.length); }, H(e, t) { return y(e.getUTCHours(), t.length); }, m(e, t) { return y(e.getUTCMinutes(), t.length); }, s(e, t) { return y(e.getUTCSeconds(), t.length); }, S(e, t) { const n = t.length; const r = e.getUTCMilliseconds(); return y(Math.floor(r * Math.pow(10, n - 3)), t.length); },
  }; function b(e) { r(1, arguments); const t = 1; const n = a(e); const i = n.getUTCDay(); const o = (i < t ? 7 : 0) + i - t; return n.setUTCDate(n.getUTCDate() - o), n.setUTCHours(0, 0, 0, 0), n; } function p(e) { r(1, arguments); const t = a(e); const n = t.getUTCFullYear(); const i = new Date(0); i.setUTCFullYear(n + 1, 0, 4), i.setUTCHours(0, 0, 0, 0); const o = b(i); const u = new Date(0); u.setUTCFullYear(n, 0, 4), u.setUTCHours(0, 0, 0, 0); const s = b(u); return t.getTime() >= o.getTime() ? n + 1 : t.getTime() >= s.getTime() ? n : n - 1; } function T(e) { r(1, arguments); const t = p(e); const n = new Date(0); n.setUTCFullYear(t, 0, 4), n.setUTCHours(0, 0, 0, 0); const a = b(n); return a; } function M(e, t) { r(1, arguments); const n = t || {}; const i = n.locale; const o = i && i.options && i.options.weekStartsOn; const u = o == null ? 0 : f(o); const s = n.weekStartsOn == null ? u : f(n.weekStartsOn); if (!(s >= 0 && s <= 6)) throw new RangeError('weekStartsOn must be between 0 and 6 inclusively'); const c = a(e); const d = c.getUTCDay(); const l = (d < s ? 7 : 0) + d - s; return c.setUTCDate(c.getUTCDate() - l), c.setUTCHours(0, 0, 0, 0), c; } function C(e, t) { r(1, arguments); const n = a(e, t); const i = n.getUTCFullYear(); const o = t || {}; const u = o.locale; const s = u && u.options && u.options.firstWeekContainsDate; const c = s == null ? 1 : f(s); const d = o.firstWeekContainsDate == null ? c : f(o.firstWeekContainsDate); if (!(d >= 1 && d <= 7)) throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively'); const l = new Date(0); l.setUTCFullYear(i + 1, 0, d), l.setUTCHours(0, 0, 0, 0); const h = M(l, t); const m = new Date(0); m.setUTCFullYear(i, 0, d), m.setUTCHours(0, 0, 0, 0); const g = M(m, t); return n.getTime() >= h.getTime() ? i + 1 : n.getTime() >= g.getTime() ? i : i - 1; } function x(e, t) { r(1, arguments); const n = t || {}; const a = n.locale; const i = a && a.options && a.options.firstWeekContainsDate; const o = i == null ? 1 : f(i); const u = n.firstWeekContainsDate == null ? o : f(n.firstWeekContainsDate); const s = C(e, t); const c = new Date(0); c.setUTCFullYear(s, 0, u), c.setUTCHours(0, 0, 0, 0); const d = M(c, t); return d; } const P = 'midnight'; const D = 'noon'; const S = 'morning'; const k = 'afternoon'; const U = 'evening'; const E = 'night'; function O(e, t) {
    const n = e > 0 ? '-' : '+';
    const r = Math.abs(e);
    const a = Math.floor(r / 60);
    const i = r % 60; if (i === 0) return n + String(a); const o = t || ''; return n + String(a) + o + y(i, 2);
  } function W(e, t) { return e % 60 == 0 ? (e > 0 ? '-' : '+') + y(Math.abs(e) / 60, 2) : Y(e, t); } function Y(e, t) { const n = t || ''; const r = e > 0 ? '-' : '+'; const a = Math.abs(e); return r + y(Math.floor(a / 60), 2) + n + y(a % 60, 2); } const q = {
    G(e, t, n) { const r = e.getUTCFullYear() > 0 ? 1 : 0; switch (t) { case 'G': case 'GG': case 'GGG': return n.era(r, { width: 'abbreviated' }); case 'GGGGG': return n.era(r, { width: 'narrow' }); case 'GGGG': default: return n.era(r, { width: 'wide' }); } }, y(e, t, n) { if (t === 'yo') { const r = e.getUTCFullYear(); const a = r > 0 ? r : 1 - r; return n.ordinalNumber(a, { unit: 'year' }); } return v.y(e, t); }, Y(e, t, n, r) { const a = C(e, r); const i = a > 0 ? a : 1 - a; return t === 'YY' ? y(i % 100, 2) : t === 'Yo' ? n.ordinalNumber(i, { unit: 'year' }) : y(i, t.length); }, R(e, t) { return y(p(e), t.length); }, u(e, t) { return y(e.getUTCFullYear(), t.length); }, Q(e, t, n) { const r = Math.ceil((e.getUTCMonth() + 1) / 3); switch (t) { case 'Q': return String(r); case 'QQ': return y(r, 2); case 'Qo': return n.ordinalNumber(r, { unit: 'quarter' }); case 'QQQ': return n.quarter(r, { width: 'abbreviated', context: 'formatting' }); case 'QQQQQ': return n.quarter(r, { width: 'narrow', context: 'formatting' }); case 'QQQQ': default: return n.quarter(r, { width: 'wide', context: 'formatting' }); } }, q(e, t, n) { const r = Math.ceil((e.getUTCMonth() + 1) / 3); switch (t) { case 'q': return String(r); case 'qq': return y(r, 2); case 'qo': return n.ordinalNumber(r, { unit: 'quarter' }); case 'qqq': return n.quarter(r, { width: 'abbreviated', context: 'standalone' }); case 'qqqqq': return n.quarter(r, { width: 'narrow', context: 'standalone' }); case 'qqqq': default: return n.quarter(r, { width: 'wide', context: 'standalone' }); } }, M(e, t, n) { const r = e.getUTCMonth(); switch (t) { case 'M': case 'MM': return v.M(e, t); case 'Mo': return n.ordinalNumber(r + 1, { unit: 'month' }); case 'MMM': return n.month(r, { width: 'abbreviated', context: 'formatting' }); case 'MMMMM': return n.month(r, { width: 'narrow', context: 'formatting' }); case 'MMMM': default: return n.month(r, { width: 'wide', context: 'formatting' }); } }, L(e, t, n) { const r = e.getUTCMonth(); switch (t) { case 'L': return String(r + 1); case 'LL': return y(r + 1, 2); case 'Lo': return n.ordinalNumber(r + 1, { unit: 'month' }); case 'LLL': return n.month(r, { width: 'abbreviated', context: 'standalone' }); case 'LLLLL': return n.month(r, { width: 'narrow', context: 'standalone' }); case 'LLLL': default: return n.month(r, { width: 'wide', context: 'standalone' }); } }, w(e, t, n, i) { const o = (function (e, t) { r(1, arguments); const n = a(e); const i = M(n, t).getTime() - x(n, t).getTime(); return Math.round(i / 6048e5) + 1; }(e, i)); return t === 'wo' ? n.ordinalNumber(o, { unit: 'week' }) : y(o, t.length); }, I(e, t, n) { const i = (function (e) { r(1, arguments); const t = a(e); const n = b(t).getTime() - T(t).getTime(); return Math.round(n / 6048e5) + 1; }(e)); return t === 'Io' ? n.ordinalNumber(i, { unit: 'week' }) : y(i, t.length); }, d(e, t, n) { return t === 'do' ? n.ordinalNumber(e.getUTCDate(), { unit: 'date' }) : v.d(e, t); }, D(e, t, n) { const i = (function (e) { r(1, arguments); const t = a(e); const n = t.getTime(); t.setUTCMonth(0, 1), t.setUTCHours(0, 0, 0, 0); const i = t.getTime(); const o = n - i; return Math.floor(o / 864e5) + 1; }(e)); return t === 'Do' ? n.ordinalNumber(i, { unit: 'dayOfYear' }) : y(i, t.length); }, E(e, t, n) { const r = e.getUTCDay(); switch (t) { case 'E': case 'EE': case 'EEE': return n.day(r, { width: 'abbreviated', context: 'formatting' }); case 'EEEEE': return n.day(r, { width: 'narrow', context: 'formatting' }); case 'EEEEEE': return n.day(r, { width: 'short', context: 'formatting' }); case 'EEEE': default: return n.day(r, { width: 'wide', context: 'formatting' }); } }, e(e, t, n, r) { const a = e.getUTCDay(); const i = (a - r.weekStartsOn + 8) % 7 || 7; switch (t) { case 'e': return String(i); case 'ee': return y(i, 2); case 'eo': return n.ordinalNumber(i, { unit: 'day' }); case 'eee': return n.day(a, { width: 'abbreviated', context: 'formatting' }); case 'eeeee': return n.day(a, { width: 'narrow', context: 'formatting' }); case 'eeeeee': return n.day(a, { width: 'short', context: 'formatting' }); case 'eeee': default: return n.day(a, { width: 'wide', context: 'formatting' }); } }, c(e, t, n, r) { const a = e.getUTCDay(); const i = (a - r.weekStartsOn + 8) % 7 || 7; switch (t) { case 'c': return String(i); case 'cc': return y(i, t.length); case 'co': return n.ordinalNumber(i, { unit: 'day' }); case 'ccc': return n.day(a, { width: 'abbreviated', context: 'standalone' }); case 'ccccc': return n.day(a, { width: 'narrow', context: 'standalone' }); case 'cccccc': return n.day(a, { width: 'short', context: 'standalone' }); case 'cccc': default: return n.day(a, { width: 'wide', context: 'standalone' }); } }, i(e, t, n) { const r = e.getUTCDay(); const a = r === 0 ? 7 : r; switch (t) { case 'i': return String(a); case 'ii': return y(a, t.length); case 'io': return n.ordinalNumber(a, { unit: 'day' }); case 'iii': return n.day(r, { width: 'abbreviated', context: 'formatting' }); case 'iiiii': return n.day(r, { width: 'narrow', context: 'formatting' }); case 'iiiiii': return n.day(r, { width: 'short', context: 'formatting' }); case 'iiii': default: return n.day(r, { width: 'wide', context: 'formatting' }); } }, a(e, t, n) { const r = e.getUTCHours() / 12 >= 1 ? 'pm' : 'am'; switch (t) { case 'a': case 'aa': case 'aaa': return n.dayPeriod(r, { width: 'abbreviated', context: 'formatting' }); case 'aaaaa': return n.dayPeriod(r, { width: 'narrow', context: 'formatting' }); case 'aaaa': default: return n.dayPeriod(r, { width: 'wide', context: 'formatting' }); } }, b(e, t, n) { let r; const a = e.getUTCHours(); switch (r = a === 12 ? D : a === 0 ? P : a / 12 >= 1 ? 'pm' : 'am', t) { case 'b': case 'bb': case 'bbb': return n.dayPeriod(r, { width: 'abbreviated', context: 'formatting' }); case 'bbbbb': return n.dayPeriod(r, { width: 'narrow', context: 'formatting' }); case 'bbbb': default: return n.dayPeriod(r, { width: 'wide', context: 'formatting' }); } }, B(e, t, n) { let r; const a = e.getUTCHours(); switch (r = a >= 17 ? U : a >= 12 ? k : a >= 4 ? S : E, t) { case 'B': case 'BB': case 'BBB': return n.dayPeriod(r, { width: 'abbreviated', context: 'formatting' }); case 'BBBBB': return n.dayPeriod(r, { width: 'narrow', context: 'formatting' }); case 'BBBB': default: return n.dayPeriod(r, { width: 'wide', context: 'formatting' }); } }, h(e, t, n) { if (t === 'ho') { let r = e.getUTCHours() % 12; return r === 0 && (r = 12), n.ordinalNumber(r, { unit: 'hour' }); } return v.h(e, t); }, H(e, t, n) { return t === 'Ho' ? n.ordinalNumber(e.getUTCHours(), { unit: 'hour' }) : v.H(e, t); }, K(e, t, n) { const r = e.getUTCHours() % 12; return t === 'Ko' ? n.ordinalNumber(r, { unit: 'hour' }) : y(r, t.length); }, k(e, t, n) { let r = e.getUTCHours(); return r === 0 && (r = 24), t === 'ko' ? n.ordinalNumber(r, { unit: 'hour' }) : y(r, t.length); }, m(e, t, n) { return t === 'mo' ? n.ordinalNumber(e.getUTCMinutes(), { unit: 'minute' }) : v.m(e, t); }, s(e, t, n) { return t === 'so' ? n.ordinalNumber(e.getUTCSeconds(), { unit: 'second' }) : v.s(e, t); }, S(e, t) { return v.S(e, t); }, X(e, t, n, r) { const a = (r._originalDate || e).getTimezoneOffset(); if (a === 0) return 'Z'; switch (t) { case 'X': return W(a); case 'XXXX': case 'XX': return Y(a); case 'XXXXX': case 'XXX': default: return Y(a, ':'); } }, x(e, t, n, r) { const a = (r._originalDate || e).getTimezoneOffset(); switch (t) { case 'x': return W(a); case 'xxxx': case 'xx': return Y(a); case 'xxxxx': case 'xxx': default: return Y(a, ':'); } }, O(e, t, n, r) { const a = (r._originalDate || e).getTimezoneOffset(); switch (t) { case 'O': case 'OO': case 'OOO': return `GMT${O(a, ':')}`; case 'OOOO': default: return `GMT${Y(a, ':')}`; } }, z(e, t, n, r) { const a = (r._originalDate || e).getTimezoneOffset(); switch (t) { case 'z': case 'zz': case 'zzz': return `GMT${O(a, ':')}`; case 'zzzz': default: return `GMT${Y(a, ':')}`; } }, t(e, t, n, r) { const a = r._originalDate || e; return y(Math.floor(a.getTime() / 1e3), t.length); }, T(e, t, n, r) { return y((r._originalDate || e).getTime(), t.length); },
  }; function N(e, t) { switch (e) { case 'P': return t.date({ width: 'short' }); case 'PP': return t.date({ width: 'medium' }); case 'PPP': return t.date({ width: 'long' }); case 'PPPP': default: return t.date({ width: 'full' }); } } function j(e, t) { switch (e) { case 'p': return t.time({ width: 'short' }); case 'pp': return t.time({ width: 'medium' }); case 'ppp': return t.time({ width: 'long' }); case 'pppp': default: return t.time({ width: 'full' }); } } const L = { p: j, P(e, t) { let n; const r = e.match(/(P+)(p+)?/); const a = r[1]; const i = r[2]; if (!i) return N(e, t); switch (a) { case 'P': n = t.dateTime({ width: 'short' }); break; case 'PP': n = t.dateTime({ width: 'medium' }); break; case 'PPP': n = t.dateTime({ width: 'long' }); break; case 'PPPP': default: n = t.dateTime({ width: 'full' }); } return n.replace('{{date}}', N(a, t)).replace('{{time}}', j(i, t)); } }; function H(e) { return e.getTime() % 6e4; } function B(e) { const t = new Date(e.getTime()); const n = Math.ceil(t.getTimezoneOffset()); return t.setSeconds(0, 0), 6e4 * n + (n > 0 ? (6e4 + H(t)) % 6e4 : H(t)); } const z = ['D', 'DD']; const X = ['YY', 'YYYY']; function F(e) { return z.indexOf(e) !== -1; } function Q(e) { return X.indexOf(e) !== -1; } function $(e) { if (e === 'YYYY') throw new RangeError('Use `yyyy` instead of `YYYY` for formatting years; see: https://git.io/fxCyr'); if (e === 'YY') throw new RangeError('Use `yy` instead of `YY` for formatting years; see: https://git.io/fxCyr'); if (e === 'D') throw new RangeError('Use `d` instead of `D` for formatting days of the month; see: https://git.io/fxCyr'); if (e === 'DD') throw new RangeError('Use `dd` instead of `DD` for formatting days of the month; see: https://git.io/fxCyr'); } const G = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g; const I = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g; const A = /^'([^]*?)'?$/; const R = /''/g; const _ = /[a-zA-Z]/; function J(e) { return e.match(A)[1].replace(R, "'"); } const V = e => { document.getElementById('city-name').innerText = `${e.name}`, document.getElementById('country-name').innerText = `${e.sys.country}`, document.getElementById('tempCel1').innerHTML = `${Math.round(e.main.temp - 273.15)}<span>&#8451;</span>`, document.getElementById('tempCel2').innerHTML = `${Math.round(1.8 * (e.main.temp - 273.15) + 32)}<span>&#8457;</span>`, document.querySelector('.icon').innerHTML = `<img src="../icons/${e.weather[0].icon}.png" alt="cloud">`, document.getElementById('container').style.backgroundImage = `linear-gradient(rgba(0,0,0,0.6), rgba(0,0,0,0.6)), url('../img/${e.weather[0].icon}.jpg')`, document.querySelector('.description').innerText = `${e.weather[0].description}`, document.getElementById('wind').innerText = `${Math.round(e.wind.speed)}`, document.getElementById('cloud').innerText = `${e.clouds.all}`, document.getElementById('humidity').innerText = `${e.main.humidity}`; }; const K = e => { const t = document.querySelector('.notification'); t.style.display = 'block', t.innerHTML = `<p>${e} not found! please enter a valid city</p>`; }; const Z = async () => { const e = async e => { (async (e, t) => { fetch(`${'http://api.openweathermap.org/data/2.5/weather'}?lat=${e}&lon=${t}&appid=${'2055d72a697ed8d59198d6cc43617eec'}`, { mode: 'cors' }).then(e => e.json()).then(e => { V(e); }); })(e.coords.latitude, e.coords.longitude); }; const t = async e => { const t = document.querySelector('.notification'); t.style.display = 'block', t.innerHTML = `<p>${e.message}</p>`; }; navigator.geolocation ? navigator.geolocation.getCurrentPosition(e, t) : K(); }; const ee = async e => { fetch(`${'http://api.openweathermap.org/data/2.5/weather'}?q=${e}&appid=${'2055d72a697ed8d59198d6cc43617eec'}`, { mode: 'cors' }).then(e => e.json()).then(t => { e === t.name ? V(t) : K(e); }); }; const te = document.getElementById('date-time'); const ne = document.querySelector('.search-box'); const re = document.getElementById('tempCel1'); const ae = document.getElementById('tempCel2'); te.innerHTML = (function (e, t, n) {
    r(2, arguments); const o = String(t); const u = n || {}; const s = u.locale || m; const c = s.options && s.options.firstWeekContainsDate; const d = c == null ? 1 : f(c); const l = u.firstWeekContainsDate == null ? d : f(u.firstWeekContainsDate); if (!(l >= 1 && l <= 7)) throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively'); const h = s.options && s.options.weekStartsOn; const g = h == null ? 0 : f(h); const y = u.weekStartsOn == null ? g : f(u.weekStartsOn); if (!(y >= 0 && y <= 6)) throw new RangeError('weekStartsOn must be between 0 and 6 inclusively'); if (!s.localize) throw new RangeError('locale must contain localize property'); if (!s.formatLong) throw new RangeError('locale must contain formatLong property'); const v = a(e); if (!i(v)) throw new RangeError('Invalid time value'); const b = B(v); const p = w(v, b); const T = {
      firstWeekContainsDate: l, weekStartsOn: y, locale: s, _originalDate: v,
    }; const M = o.match(I).map(((e) => { const t = e[0]; return t === 'p' || t === 'P' ? (0, L[t])(e, s.formatLong, T) : e; })).join('').match(G)
      .map(((e) => { if (e === "''") return "'"; const t = e[0]; if (t === "'") return J(e); const n = q[t]; if (n) return !u.useAdditionalWeekYearTokens && Q(e) && $(e), !u.useAdditionalDayOfYearTokens && F(e) && $(e), n(p, e, s.localize, T); if (t.match(_)) throw new RangeError(`Format string contains an unescaped latin alphabet character \`${t}\``); return e; }))
      .join(''); return M;
  }(new Date(), 'h:m a — iiii, dd MMM `yy')); ae.style.display = 'none', document.addEventListener('DOMContentLoaded', Z), ne.addEventListener('keypress', e => { e.keyCode === 13 && (ee(ne.value), ne.value = ''); }), re.addEventListener('click', () => { ae.style.display = 'block', re.style.display = 'none'; }), ae.addEventListener('click', () => { re.style.display = 'block', ae.style.display = 'none'; });
}]));